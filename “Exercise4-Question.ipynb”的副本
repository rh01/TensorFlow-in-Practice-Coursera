{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“Exercise4-Question.ipynb”的副本","version":"0.3.2","provenance":[{"file_id":"https://github.com/lmoroney/dlaicourse/blob/master/Exercises/Exercise%204%20-%20Handling%20Complex%20Images/Exercise%204-Question.ipynb","timestamp":1561334330155}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"UncprnB0ymAE","colab_type":"text"},"source":["Below is code with a link to a happy or sad dataset which contains 80 images, 40 happy and 40 sad. \n","Create a convolutional neural network that trains to 100% accuracy on these images,  which cancels training upon hitting training accuracy of >.999\n","\n","Hint -- it will work best with 3 convolutional layers."]},{"cell_type":"code","metadata":{"id":"7Vti6p3PxmpS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":202},"outputId":"610c55cb-f463-42c0-f1cf-d62038b0d926","executionInfo":{"status":"ok","timestamp":1561336545743,"user_tz":-480,"elapsed":4009,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}}},"source":["import tensorflow as tf\n","import os\n","import zipfile\n","\n","\n","DESIRED_ACCURACY = 0.999\n","\n","!wget --no-check-certificate \\\n","    \"https://storage.googleapis.com/laurencemoroney-blog.appspot.com/happy-or-sad.zip\" \\\n","    -O \"/tmp/happy-or-sad.zip\"\n","\n","zip_ref = zipfile.ZipFile(\"/tmp/happy-or-sad.zip\", 'r')\n","zip_ref.extractall(\"/tmp/h-or-s\")\n","zip_ref.close()\n","\n","class myCallback(tf.keras.callbacks.Callback):\n","  def on_epoch_end(self, epoch, logs={}):\n","    if logs.get('acc') > 0.9999:\n","      print(\"\\nReached 9999% accuracy, so cancel training.\")\n","      self.model.stop_training=True\n","\n","callbacks = myCallback()"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2019-06-24 00:35:44--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/happy-or-sad.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.141.128, 2607:f8b0:400c:c06::80\n","Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.141.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2670333 (2.5M) [application/zip]\n","Saving to: ‘/tmp/happy-or-sad.zip’\n","\n","\r/tmp/happy-or-sad.z   0%[                    ]       0  --.-KB/s               \r/tmp/happy-or-sad.z 100%[===================>]   2.55M  --.-KB/s    in 0.02s   \n","\n","2019-06-24 00:35:44 (143 MB/s) - ‘/tmp/happy-or-sad.zip’ saved [2670333/2670333]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6DLGbXXI1j_V","colab_type":"code","colab":{}},"source":["# This Code Block should Define and Compile the Model\n","model = tf.keras.models.Sequential([\n","  tf.keras.layers.Conv2D(16, (3,3), activation='relu',input_shape=(150,150,3)),\n","  tf.keras.layers.MaxPool2D((2,2)),\n","  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","  tf.keras.layers.MaxPool2D((2,2)),\n","  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","  tf.keras.layers.MaxPool2D((2,2)),\n","  # Flatten the results to feed into a DNN\n","  tf.keras.layers.Flatten(),\n","  # 512 neuron hidden layer\n","  tf.keras.layers.Dense(512, activation='relu'),\n","  # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')\n","  tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","from tensorflow.keras.optimizers import RMSprop\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer=RMSprop(lr=0.001),\n","              metrics=['acc'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4Ap9fUJE1vVu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"e9c72440-5c4a-4cae-fc2a-f3a81e7ead47","executionInfo":{"status":"ok","timestamp":1561336621981,"user_tz":-480,"elapsed":687,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}}},"source":["# This code block should create an instance of an ImageDataGenerator called train_datagen \n","# And a train_generator by calling train_datagen.flow_from_directory\n","\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","train_datagen = ImageDataGenerator(rescale=1.0/255)\n","\n","train_generator = train_datagen.flow_from_directory(\n","       '/tmp/h-or-s',  # This is the source directory for training images\n","        target_size=(150, 150),  # All images will be resized to 150x150\n","        batch_size=128,\n","        # Since we use binary_crossentropy loss, we need binary labels\n","        class_mode='binary'\n",")\n","\n","# Expected output: 'Found 80 images belonging to 2 classes'"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Found 80 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"48dLm13U1-Le","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":84},"outputId":"8535010c-684d-4fb3-b63f-73e85769c5f2","executionInfo":{"status":"ok","timestamp":1561336743899,"user_tz":-480,"elapsed":12715,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}}},"source":["# This code block should call model.fit_generator and train for\n","# a number of epochs. \n","history = model.fit_generator(\n","      train_generator,\n","      steps_per_epoch=8,  \n","      epochs=15,\n","      verbose=1,\n","      callbacks=[callbacks])\n","    \n","# Expected output: \"Reached 99.9% accuracy so cancelling training!\"\""],"execution_count":9,"outputs":[{"output_type":"stream","text":["Epoch 1/15\n","7/8 [=========================>....] - ETA: 1s - loss: 7.8387e-04 - acc: 1.0000\n","Reached 9999% accuracy, so cancel training.\n","8/8 [==============================] - 12s 2s/step - loss: 7.6359e-04 - acc: 1.0000\n"],"name":"stdout"}]}]}
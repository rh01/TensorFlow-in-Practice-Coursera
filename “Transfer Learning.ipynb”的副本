{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“Transfer Learning.ipynb”的副本","version":"0.3.2","provenance":[{"file_id":"https://github.com/lmoroney/dlaicourse/blob/master/Course%202%20-%20Part%206%20-%20Lesson%203%20-%20Notebook.ipynb","timestamp":1561448371942}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 2","name":"python2"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab_type":"code","id":"1xJZ5glPPCRz","outputId":"534ed6ed-e23d-423a-ce64-40149f4c4c02","executionInfo":{"status":"ok","timestamp":1561448882174,"user_tz":-480,"elapsed":21244,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["import os\n","\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model\n","!wget --no-check-certificate \\\n","    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n","    -O /tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","  \n","from tensorflow.keras.applications.inception_v3 import InceptionV3\n","\n","local_weights_file = '/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","\n","pre_trained_model = InceptionV3(input_shape = (150, 150, 3), \n","                                include_top = False, \n","                                weights = None)\n","\n","pre_trained_model.load_weights(local_weights_file)\n","\n","for layer in pre_trained_model.layers:\n","  layer.trainable = False\n","  \n","# pre_trained_model.summary()\n","\n","last_layer = pre_trained_model.get_layer('mixed7')\n","print('last layer output shape: ', last_layer.output_shape)\n","last_output = last_layer.output"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2019-06-25 07:47:44--  https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.203.128, 2404:6800:4008:c00::80\n","Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.203.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 87910968 (84M) [application/x-hdf]\n","Saving to: ‘/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5’\n","\n","/tmp/inception_v3_w 100%[===================>]  83.84M  40.1MB/s    in 2.1s    \n","\n","2019-06-25 07:47:47 (40.1 MB/s) - ‘/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5’ saved [87910968/87910968]\n","\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0625 07:47:48.484525 140281464444800 deprecation.py:506] From /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling __init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n"],"name":"stderr"},{"output_type":"stream","text":["('last layer output shape: ', (None, 7, 7, 768))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"BMXb913pbvFg","colab":{"base_uri":"https://localhost:8080/","height":87},"outputId":"62126392-b0af-4895-e221-6bc0774ca72d","executionInfo":{"status":"ok","timestamp":1561449133165,"user_tz":-480,"elapsed":985,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}}},"source":["from tensorflow.keras.optimizers import RMSprop\n","\n","# Flatten the output layer to 1 dimension\n","x = layers.Flatten()(last_output)\n","# Add a fully connected layer with 1,024 hidden units and ReLU activation\n","x = layers.Dense(1024, activation='relu')(x)\n","# Add a dropout rate of 0.2\n","x = layers.Dropout(0.2)(x)                  \n","# Add a final sigmoid layer for classification\n","x = layers.Dense  (1, activation='sigmoid')(x)           \n","\n","model = Model( pre_trained_model.input, x) \n","\n","model.compile(optimizer = RMSprop(lr=0.0001), \n","              loss = 'binary_crossentropy', \n","              metrics = ['acc'])\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["W0625 07:52:13.495162 140281464444800 deprecation.py:323] From /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/nn_impl.py:180: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"O4s8HckqGlnb","outputId":"28110aec-7c5f-4a6a-ad5f-60e09843ff1d","executionInfo":{"status":"ok","timestamp":1561449171787,"user_tz":-480,"elapsed":6452,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}},"colab":{"base_uri":"https://localhost:8080/","height":235}},"source":["!wget --no-check-certificate \\\n","        https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \\\n","       -O /tmp/cats_and_dogs_filtered.zip\n","\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","import os\n","import zipfile\n","\n","local_zip = '//tmp/cats_and_dogs_filtered.zip'\n","\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","\n","zip_ref.extractall('/tmp')\n","zip_ref.close()\n","\n","# Define our example directories and files\n","base_dir = '/tmp/cats_and_dogs_filtered'\n","\n","train_dir = os.path.join( base_dir, 'train')\n","validation_dir = os.path.join( base_dir, 'validation')\n","\n","\n","train_cats_dir = os.path.join(train_dir, 'cats') # Directory with our training cat pictures\n","train_dogs_dir = os.path.join(train_dir, 'dogs') # Directory with our training dog pictures\n","validation_cats_dir = os.path.join(validation_dir, 'cats') # Directory with our validation cat pictures\n","validation_dogs_dir = os.path.join(validation_dir, 'dogs')# Directory with our validation dog pictures\n","\n","train_cat_fnames = os.listdir(train_cats_dir)\n","train_dog_fnames = os.listdir(train_dogs_dir)\n","\n","# Add our data-augmentation parameters to ImageDataGenerator\n","train_datagen = ImageDataGenerator(rescale = 1./255.,\n","                                   rotation_range = 40,\n","                                   width_shift_range = 0.2,\n","                                   height_shift_range = 0.2,\n","                                   shear_range = 0.2,\n","                                   zoom_range = 0.2,\n","                                   horizontal_flip = True)\n","\n","# Note that the validation data should not be augmented!\n","test_datagen = ImageDataGenerator( rescale = 1.0/255. )\n","\n","# Flow training images in batches of 20 using train_datagen generator\n","train_generator = train_datagen.flow_from_directory(train_dir,\n","                                                    batch_size = 20,\n","                                                    class_mode = 'binary', \n","                                                    target_size = (150, 150))     \n","\n","# Flow validation images in batches of 20 using test_datagen generator\n","validation_generator =  test_datagen.flow_from_directory( validation_dir,\n","                                                          batch_size  = 20,\n","                                                          class_mode  = 'binary', \n","                                                          target_size = (150, 150))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["--2019-06-25 07:52:48--  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.203.128, 2404:6800:4008:c03::80\n","Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.203.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 68606236 (65M) [application/zip]\n","Saving to: ‘/tmp/cats_and_dogs_filtered.zip’\n","\n","/tmp/cats_and_dogs_ 100%[===================>]  65.43M  85.4MB/s    in 0.8s    \n","\n","2019-06-25 07:52:50 (85.4 MB/s) - ‘/tmp/cats_and_dogs_filtered.zip’ saved [68606236/68606236]\n","\n","Found 2000 images belonging to 2 classes.\n","Found 1000 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Blhq2MAUeyGA","outputId":"030e341f-516b-4d27-d707-adc965f46c5f","executionInfo":{"status":"ok","timestamp":1561449664361,"user_tz":-480,"elapsed":484027,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}},"colab":{"base_uri":"https://localhost:8080/","height":689}},"source":["history = model.fit_generator(\n","            train_generator,\n","            validation_data = validation_generator,\n","            steps_per_epoch = 100,\n","            epochs = 20,\n","            validation_steps = 50,\n","            verbose = 2)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","100/100 - 30s - loss: 0.4827 - acc: 0.7760 - val_loss: 0.2195 - val_acc: 0.9370\n","Epoch 2/20\n","100/100 - 23s - loss: 0.3820 - acc: 0.8320 - val_loss: 0.3209 - val_acc: 0.9190\n","Epoch 3/20\n","100/100 - 24s - loss: 0.3618 - acc: 0.8405 - val_loss: 0.5453 - val_acc: 0.9010\n","Epoch 4/20\n","100/100 - 23s - loss: 0.3433 - acc: 0.8570 - val_loss: 0.3070 - val_acc: 0.9470\n","Epoch 5/20\n","100/100 - 24s - loss: 0.3314 - acc: 0.8565 - val_loss: 0.3539 - val_acc: 0.9420\n","Epoch 6/20\n","100/100 - 23s - loss: 0.3037 - acc: 0.8660 - val_loss: 0.2959 - val_acc: 0.9530\n","Epoch 7/20\n","100/100 - 24s - loss: 0.3053 - acc: 0.8710 - val_loss: 0.2959 - val_acc: 0.9580\n","Epoch 8/20\n","100/100 - 23s - loss: 0.2836 - acc: 0.8820 - val_loss: 0.3972 - val_acc: 0.9500\n","Epoch 9/20\n","100/100 - 24s - loss: 0.2826 - acc: 0.8825 - val_loss: 0.4152 - val_acc: 0.9440\n","Epoch 10/20\n","100/100 - 23s - loss: 0.2815 - acc: 0.8855 - val_loss: 0.4770 - val_acc: 0.9440\n","Epoch 11/20\n","100/100 - 24s - loss: 0.2930 - acc: 0.8815 - val_loss: 0.4266 - val_acc: 0.9520\n","Epoch 12/20\n","100/100 - 24s - loss: 0.2913 - acc: 0.8855 - val_loss: 0.4338 - val_acc: 0.9520\n","Epoch 13/20\n","100/100 - 24s - loss: 0.3035 - acc: 0.8760 - val_loss: 0.4336 - val_acc: 0.9570\n","Epoch 14/20\n","100/100 - 23s - loss: 0.2515 - acc: 0.8995 - val_loss: 0.4542 - val_acc: 0.9580\n","Epoch 15/20\n","100/100 - 24s - loss: 0.2736 - acc: 0.8910 - val_loss: 0.5001 - val_acc: 0.9520\n","Epoch 16/20\n","100/100 - 23s - loss: 0.2833 - acc: 0.8925 - val_loss: 0.3519 - val_acc: 0.9620\n","Epoch 17/20\n","100/100 - 24s - loss: 0.2576 - acc: 0.8965 - val_loss: 0.5016 - val_acc: 0.9500\n","Epoch 18/20\n","100/100 - 24s - loss: 0.2626 - acc: 0.8945 - val_loss: 0.3626 - val_acc: 0.9590\n","Epoch 19/20\n","100/100 - 24s - loss: 0.2729 - acc: 0.8880 - val_loss: 0.3618 - val_acc: 0.9590\n","Epoch 20/20\n","100/100 - 23s - loss: 0.2678 - acc: 0.8920 - val_loss: 0.4331 - val_acc: 0.9580\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C2Fp6Se9rKuL","colab_type":"code","outputId":"0cf3a12b-5295-4e65-fefc-f4633aada92c","executionInfo":{"status":"ok","timestamp":1561451454877,"user_tz":-480,"elapsed":2349,"user":{"displayName":"申恒恒","photoUrl":"https://lh5.googleusercontent.com/-rXn3NCb40hc/AAAAAAAAAAI/AAAAAAAADHs/looj2vH7Tck/s64/photo.jpg","userId":"02723399992930938550"}},"colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["import matplotlib.pyplot as plt\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'r', label='Training accuracy')\n","plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n","plt.title('Training and validation accuracy')\n","plt.legend(loc=0)\n","plt.figure()\n","\n","\n","plt.show()"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nMx7P6tWqtWu779TIkZkrQ9XtN3GiarVq7n3dfrvqjh2ZKyscAYs1gGNsyA/yGblZQggPcXGqI0ao\nXnHFmSRQv77qCy+4A056Nm5U7dXL7VeunOrrr6seOZL9cedFhw+rfvGF6s03n0kCFSuq9u+vGhOj\neuJE9r3u+PGql1/uXrNwYdWePVXnzEn/oLxypWqzZm6/7t2zfuDdu1f12mtdeX37ZjzZrV6t2rat\n279pU9Vff81aPOHIEoIJqi1bVIcPP3MAANUGDVSHDFFdty5zZS5bptqpkyurWjXV0aPdL0eTtkOH\nVCdPdgfT4sXd51epkurdd6vOmpXzn+GqVaoPPKBatqyLpXZtl+RTHuhPnHDfl0KFXLyTJwcvhlOn\nVJ97zr1+VJTqX3+lv8/+/aoPPaQaEeF+mIwapZqQELyYwoklBBMU+/ad+TUPqg0bqr74ourvvwfv\nNX76SfWyy1z5F13kDhSnTgWv/Lzg0CFXrdKtm2qxYu6zqlzZVcHNnh0eifTIEdUJE1z1IbgD/803\nuyS1bJlqkyZuec+eqn//nT0xfPONaqlSLuHMnet/m9OnVT/5RLVKFXeGe9ddGa/yym2CmhCAjsB6\nYBMwyM/684HZwErgJ6CGz7pTwHLvNs1neS3gN6/Mz4HC6cVhCSFn/fqras2a7hfUoEGq69dn32ud\nPu3+mevV06RT95kzM18nHC62blW95x7V889XPe+8zN+KFnWfyznnqN57rzvYhfOv2TVr3K/v8uXP\n/JioXNm1ZWS3detU69Rx39sRI5J/h5YvP5OwLrlEdeHC7I8nHASaENLtZSQiEcAGoAMQBywCeqnq\nWp9tvgC+U9WPReRKoJ+q3uqtO6SqJf2UOxn4SlUnicj7wApVHZVWLNbLKGecPg2vvw7PPAM1arhu\ngJddljOvfeoUfPYZPPccxMZC27aue2GLFjnz+sGydy+89tqZnlVdurgulZlVrpwrIzoaIiKCF2d2\nO3bMdT/esAHuvx8qVMiZ1z1wwPVA+vpr6N0bhg1z36ORI91n+eqrcPvt7oKx/CBovYyAy4CZPs+f\nBJ5Msc0a4FzvsQAHfNYd8lOmALuAgv5eI7WbnSFkv/h41Xbt3C+om28OXS+gY8dU33nHnfqDaufO\nqtOnh/evYlXX2PrKK64+XUT1lltU//gj1FHlT6dOqb70kvs7JN4GDFDdvTvUkeU8glVlBHQDxvg8\n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\nRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]}]}